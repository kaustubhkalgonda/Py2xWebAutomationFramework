{"name": "Verify Add Customer", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=124.0.6367.208)\nStacktrace:\n0   chromedriver                        0x000000010a52da78 chromedriver + 5216888\n1   chromedriver                        0x000000010a5256b3 chromedriver + 5183155\n2   chromedriver                        0x000000010a09736b chromedriver + 406379\n3   chromedriver                        0x000000010a0e415a chromedriver + 721242\n4   chromedriver                        0x000000010a0d8009 chromedriver + 671753\n5   chromedriver                        0x000000010a105702 chromedriver + 857858\n6   chromedriver                        0x000000010a0d7998 chromedriver + 670104\n7   chromedriver                        0x000000010a1058be chromedriver + 858302\n8   chromedriver                        0x000000010a1246bf chromedriver + 984767\n9   chromedriver                        0x000000010a1054a3 chromedriver + 857251\n10  chromedriver                        0x000000010a0d5fe3 chromedriver + 663523\n11  chromedriver                        0x000000010a0d692e chromedriver + 665902\n12  chromedriver                        0x000000010a4eb990 chromedriver + 4946320\n13  chromedriver                        0x000000010a4f1a44 chromedriver + 4971076\n14  chromedriver                        0x000000010a4cc48e chromedriver + 4818062\n15  chromedriver                        0x000000010a4f2559 chromedriver + 4973913\n16  chromedriver                        0x000000010a4bc714 chromedriver + 4753172\n17  chromedriver                        0x000000010a514c08 chromedriver + 5114888\n18  chromedriver                        0x000000010a514dc7 chromedriver + 5115335\n19  chromedriver                        0x000000010a5252d3 chromedriver + 5182163\n20  libsystem_pthread.dylib             0x00007ff8035be4e1 _pthread_start + 125\n21  libsystem_pthread.dylib             0x00007ff8035b9f6b thread_start + 15", "trace": "self = <testCases.test_addCustomer.Test_AddCustomer object at 0x10873d460>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2685dd3c19acf4d60c4f6d4d74257fec\")>\n\n    @allure.title(\"Verify Add Customer\")\n    @allure.testcase(\"TC003\")\n    @allure.tag(\"Smoke\")\n    def test_addCustomer(self, setup):\n        try:\n            self.logger.info(\"****** Verifying add customer test ******\")\n            self.driver = setup\n            self.driver.get(self.baseURL)\n            self.lp = LoginPage(self.driver)\n            self.lp.setUserName(self.username)\n            self.lp.setPassword(self.password)\n            self.lp.clickLogin()\n            self.logger.info(\"****** Login successful******\")\n            self.dp = DashboardPage(self.driver)\n>           self.dp.clickCustomersLink()\n\ntestCases/test_addCustomer.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects/DashboardPage.py:13: in clickCustomersLink\n    self.driver.find_element(By.XPATH,self.link_customers_xpath).click()\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x108cec740>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff8035be4e1 _pthread_start + 125\\\\n21  libsystem_pthread.dylib             0x00007ff8035b9f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=124.0.6367.208)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010a52da78 chromedriver + 5216888\nE       1   chromedriver                        0x000000010a5256b3 chromedriver + 5183155\nE       2   chromedriver                        0x000000010a09736b chromedriver + 406379\nE       3   chromedriver                        0x000000010a0e415a chromedriver + 721242\nE       4   chromedriver                        0x000000010a0d8009 chromedriver + 671753\nE       5   chromedriver                        0x000000010a105702 chromedriver + 857858\nE       6   chromedriver                        0x000000010a0d7998 chromedriver + 670104\nE       7   chromedriver                        0x000000010a1058be chromedriver + 858302\nE       8   chromedriver                        0x000000010a1246bf chromedriver + 984767\nE       9   chromedriver                        0x000000010a1054a3 chromedriver + 857251\nE       10  chromedriver                        0x000000010a0d5fe3 chromedriver + 663523\nE       11  chromedriver                        0x000000010a0d692e chromedriver + 665902\nE       12  chromedriver                        0x000000010a4eb990 chromedriver + 4946320\nE       13  chromedriver                        0x000000010a4f1a44 chromedriver + 4971076\nE       14  chromedriver                        0x000000010a4cc48e chromedriver + 4818062\nE       15  chromedriver                        0x000000010a4f2559 chromedriver + 4973913\nE       16  chromedriver                        0x000000010a4bc714 chromedriver + 4753172\nE       17  chromedriver                        0x000000010a514c08 chromedriver + 5114888\nE       18  chromedriver                        0x000000010a514dc7 chromedriver + 5115335\nE       19  chromedriver                        0x000000010a5252d3 chromedriver + 5182163\nE       20  libsystem_pthread.dylib             0x00007ff8035be4e1 _pthread_start + 125\nE       21  libsystem_pthread.dylib             0x00007ff8035b9f6b thread_start + 15\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "e72c07cf-1965-4ee6-8074-a8693065a46b-attachment.txt", "type": "text/plain"}], "start": 1716105816212, "stop": 1716105819532, "uuid": "7bcad16c-8b0a-4925-89e6-6885a701890c", "historyId": "96db79d2d39f88387a06437d15a7306d", "testCaseId": "96db79d2d39f88387a06437d15a7306d", "fullName": "testCases.test_addCustomer.Test_AddCustomer#test_addCustomer", "labels": [{"name": "tag", "value": "Smoke"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_addCustomer"}, {"name": "subSuite", "value": "Test_AddCustomer"}, {"name": "host", "value": "Kaustubhs-MacBook-Pro-2.local"}, {"name": "thread", "value": "36855-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_addCustomer"}], "links": [{"type": "tms", "url": "TC003", "name": "TC003"}]}