{"name": "test_homePageTitle", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=124.0.6367.158)\nStacktrace:\n0   chromedriver                        0x0000000105eb0ae8 chromedriver + 5217000\n1   chromedriver                        0x0000000105ea8723 chromedriver + 5183267\n2   chromedriver                        0x0000000105a1a36b chromedriver + 406379\n3   chromedriver                        0x0000000105a01091 chromedriver + 303249\n4   chromedriver                        0x00000001059ffbc2 chromedriver + 297922\n5   chromedriver                        0x00000001059ffe9a chromedriver + 298650\n6   chromedriver                        0x0000000105a1cebf chromedriver + 417471\n7   chromedriver                        0x0000000105aa8255 chromedriver + 987733\n8   chromedriver                        0x0000000105a88702 chromedriver + 857858\n9   chromedriver                        0x0000000105aa76bf chromedriver + 984767\n10  chromedriver                        0x0000000105a884a3 chromedriver + 857251\n11  chromedriver                        0x0000000105a58fe3 chromedriver + 663523\n12  chromedriver                        0x0000000105a5992e chromedriver + 665902\n13  chromedriver                        0x0000000105e6ea00 chromedriver + 4946432\n14  chromedriver                        0x0000000105e74ab4 chromedriver + 4971188\n15  chromedriver                        0x0000000105e4f4fe chromedriver + 4818174\n16  chromedriver                        0x0000000105e755c9 chromedriver + 4974025\n17  chromedriver                        0x0000000105e3f784 chromedriver + 4753284\n18  chromedriver                        0x0000000105e97c78 chromedriver + 5115000\n19  chromedriver                        0x0000000105e97e37 chromedriver + 5115447\n20  chromedriver                        0x0000000105ea8343 chromedriver + 5182275\n21  libsystem_pthread.dylib             0x00007ff8035be4e1 _pthread_start + 125\n22  libsystem_pthread.dylib             0x00007ff8035b9f6b thread_start + 15", "trace": "self = <testCases.test_login.Test_001_Login object at 0x111147560>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3a25da95e09c94a9925c2c3e70b51157\")>\n\n    def test_homePageTitle(self, setup):\n        try:\n            self.logger.info(\"****** Verifying Homepage title ******\")\n            self.driver = setup\n>           self.driver.get(self.baseURL)\n\ntest_login.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x111a48ec0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...ff8035be4e1 _pthread_start + 125\\\\n22  libsystem_pthread.dylib             0x00007ff8035b9f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=124.0.6367.158)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000105eb0ae8 chromedriver + 5217000\nE       1   chromedriver                        0x0000000105ea8723 chromedriver + 5183267\nE       2   chromedriver                        0x0000000105a1a36b chromedriver + 406379\nE       3   chromedriver                        0x0000000105a01091 chromedriver + 303249\nE       4   chromedriver                        0x00000001059ffbc2 chromedriver + 297922\nE       5   chromedriver                        0x00000001059ffe9a chromedriver + 298650\nE       6   chromedriver                        0x0000000105a1cebf chromedriver + 417471\nE       7   chromedriver                        0x0000000105aa8255 chromedriver + 987733\nE       8   chromedriver                        0x0000000105a88702 chromedriver + 857858\nE       9   chromedriver                        0x0000000105aa76bf chromedriver + 984767\nE       10  chromedriver                        0x0000000105a884a3 chromedriver + 857251\nE       11  chromedriver                        0x0000000105a58fe3 chromedriver + 663523\nE       12  chromedriver                        0x0000000105a5992e chromedriver + 665902\nE       13  chromedriver                        0x0000000105e6ea00 chromedriver + 4946432\nE       14  chromedriver                        0x0000000105e74ab4 chromedriver + 4971188\nE       15  chromedriver                        0x0000000105e4f4fe chromedriver + 4818174\nE       16  chromedriver                        0x0000000105e755c9 chromedriver + 4974025\nE       17  chromedriver                        0x0000000105e3f784 chromedriver + 4753284\nE       18  chromedriver                        0x0000000105e97c78 chromedriver + 5115000\nE       19  chromedriver                        0x0000000105e97e37 chromedriver + 5115447\nE       20  chromedriver                        0x0000000105ea8343 chromedriver + 5182275\nE       21  libsystem_pthread.dylib             0x00007ff8035be4e1 _pthread_start + 125\nE       22  libsystem_pthread.dylib             0x00007ff8035b9f6b thread_start + 15\n\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException"}, "attachments": [{"name": "log", "source": "1c8ba253-2237-4018-aee1-2c567b24d840-attachment.txt", "type": "text/plain"}], "start": 1715624055870, "stop": 1715624055903, "uuid": "d0d3d8f9-8c26-4ba0-a55c-96d3e4e57080", "historyId": "9ce9f79a501a07b7dff9aa6372052098", "testCaseId": "9ce9f79a501a07b7dff9aa6372052098", "fullName": "testCases.test_login.Test_001_Login#test_homePageTitle", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "Test_001_Login"}, {"name": "host", "value": "Kaustubhs-MacBook-Pro-2.local"}, {"name": "thread", "value": "26486-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_login"}]}